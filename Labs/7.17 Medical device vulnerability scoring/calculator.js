let radios_array = [
    document.querySelectorAll("input[name=AV]"),        // 0 - Attack Vector
    document.querySelectorAll("input[name=AC]"),        // 1 - Attack Complexity
    document.querySelectorAll("input[name=PR]"),        // 2 - Privilege Required
    document.querySelectorAll("input[name=UI]"),        // 3 - User Interaction
    document.querySelectorAll("input[name=scope]"),     // 4 - Scope
    document.querySelectorAll("input[name=conf]"),      // 5 - Confidentiality Impact
    document.querySelectorAll("input[name=integ]"),     // 6 - Integrity Impact
    document.querySelectorAll("input[name=avail]"),     // 7 - Availability Impact
    document.querySelectorAll("input[name=health]"),    // 8 - Health Impact
    document.querySelectorAll("input[name=sens]")       // 9 - Sensitivity
];

window.addEventListener("DOMContentLoaded", domLoaded);

function domLoaded() {
    radios_array.forEach((radio_list) => {
        radio_list.forEach((radio) => {
            radio.addEventListener('click', updateScore);
        });
    });
}

function updateScore() {
    let selectedBool = [];
    radios_array.forEach((radio_list, radio_list_index) => {
        let list_selected = false;
        radio_list.forEach((radio) => {
            if (radio.checked) {
                list_selected = true;
            }
        });
        selectedBool[radio_list_index] = list_selected;
    });

    if (selectedBool.every(Boolean)) {
        displayScore();
    }

    return selectedBool.every(Boolean);
}

function displayScore() {
    document.getElementById("warning").setAttribute("style", "display: none;");
    document.getElementById("score").innerText = calculateScore().toString();
}

function calculateScore() {
    let scores = [];
    let score_final;

    let scope_status;
    let score_base;
    let score_exploitability;
    let base_confidentiality;
    let base_integrity;
    let base_availability;
    let attack_vector;
    let attack_complexity;
    let privilege_required;
    let user_interaction;

    for (let i = 0; i < radios_array.length; i++) {
        scores[i] = returnChecked(radios_array[i]).value;
    }
    //console.log(scores);

    // score calculation
    switch (scores[4]) { // Scope
        case "scope_U": // Unchanged
            scope_status = 1.0;
            break;
        case "scope_C": // Changed
            scope_status = 1.08;
            break;
    }

    // setting base_confidentiality
    //no sensitivity
    if (scores[9] === "sens_N" && scores[5] === "conf_N") {base_confidentiality = 0.00;}
    if (scores[9] === "sens_N" && scores[5] === "conf_L") {base_confidentiality = 0.22;}
    if (scores[9] === "sens_N" && scores[5] === "conf_H") {base_confidentiality = 0.56;}
    //low sensitivity
    if (scores[9] === "sens_L" && scores[5] === "conf_N") {base_confidentiality = 0.00;}
    if (scores[9] === "sens_L" && scores[5] === "conf_L") {base_confidentiality = 0.65;}
    if (scores[9] === "sens_L" && scores[5] === "conf_H") {base_confidentiality = 0.75;}
    //high sensitivity
    if (scores[9] === "sens_H" && scores[5] === "conf_N") {base_confidentiality = 0.00;}
    if (scores[9] === "sens_H" && scores[5] === "conf_L") {base_confidentiality = 0.85;}
    if (scores[9] === "sens_H" && scores[5] === "conf_H") {base_confidentiality = 0.95;}

    // setting base_integrity
    //no health impact
    if (scores[8] === "health_N" && scores[6] === "integ_N") {base_integrity = 0.00;}
    if (scores[8] === "health_N" && scores[6] === "integ_L") {base_integrity = 0.22;}
    if (scores[8] === "health_N" && scores[6] === "integ_H") {base_integrity = 0.56;}
    //low health impact
    if (scores[8] === "health_L" && scores[6] === "integ_N") {base_integrity = 0.55;}
    if (scores[8] === "health_L" && scores[6] === "integ_L") {base_integrity = 0.60;}
    if (scores[8] === "health_L" && scores[6] === "integ_H") {base_integrity = 0.75;}
    //high health impact
    if (scores[8] === "health_H" && scores[6] === "integ_N") {base_integrity = 0.85;}
    if (scores[8] === "health_H" && scores[6] === "integ_L") {base_integrity = 0.90;}
    if (scores[8] === "health_H" && scores[6] === "integ_H") {base_integrity = 0.95;}

    // setting base_availability
    //no health impact
    if (scores[8] === "health_N" && scores[7] === "avail_N") {base_availability = 0.00;}
    if (scores[8] === "health_N" && scores[7] === "avail_L") {base_availability = 0.22;}
    if (scores[8] === "health_N" && scores[7] === "avail_H") {base_availability = 0.56;}
    //low health impact
    if (scores[8] === "health_L" && scores[7] === "avail_N") {base_availability = 0.55;}
    if (scores[8] === "health_L" && scores[7] === "avail_L") {base_availability = 0.60;}
    if (scores[8] === "health_L" && scores[7] === "avail_H") {base_availability = 0.65;}
    //high health impact
    if (scores[8] === "health_H" && scores[7] === "avail_N") {base_availability = 0.85;}
    if (scores[8] === "health_H" && scores[7] === "avail_L") {base_availability = 0.90;}
    if (scores[8] === "health_H" && scores[7] === "avail_H") {base_availability = 0.95;}

    score_base = base_confidentiality + base_integrity + base_availability;

    switch (scores[0]) { // Attack Vector
        case "AV_N": // Network
            attack_vector = 0.85;
            break;
        case "AV_A": // Adjacent Network
            attack_vector = 0.62;
            break;
        case "AV_L": // Local
            attack_vector = 0.55;
            break;
        case "AV_P": // Physical
            attack_vector = 0.20;
            break;
    }

    switch (scores[1]) { // Attack Complexity
        case "AC_L": // Low
            attack_complexity = 0.77;
            break;
        case "AC_H": // High
            attack_complexity = 0.44;
            break;
    }

    switch (scores[2]) { // Privilege Required
        case "PR_N": // None
            privilege_required = 0.85;
            break;
        case "PR_L": // Low
            privilege_required = 0.62;
            break;
        case "PR_H": // High
            privilege_required = 0.27;
            break;
    }

    switch (scores[3]) { // User Interaction
        case "UI_N": //
            user_interaction = 0.85;
            break;
        case "UI_R": //
            user_interaction = 0.62;
            break;
    }

    score_exploitability = attack_vector * attack_complexity * privilege_required * user_interaction;

    score_final = (scope_status) * ((3.326258289 * score_base) + (1.1 * score_exploitability))

    if (score_base === 0.0) {
        score_final = 0.0;
    }

    console.log(score_final);

    if (score_final > 10.0) { //set max
        score_final = 10.0;
    } else if (score_final < 0.0) { // set min
        score_final = 0.0;
    }
    score_final = roundUp(score_final);
    return score_final;
}

function returnChecked(arrayOfRadios) {
    let checkedButton;
    arrayOfRadios.forEach((radioButton) => {
        if (radioButton.checked) {
            checkedButton = radioButton;
        }
    })
    return checkedButton;
}

function roundUp(num) {
    num = (Math.ceil((num * 100) / 10) / 10).toFixed(1);
    return num;
}